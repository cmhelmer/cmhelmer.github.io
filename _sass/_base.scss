// Base styles for unclassed elements
// Default paragraph and character elements output by Markdown renderer (kramdown)
// Extend top-level selectors to merge with reset

*,
*::before,
*::after {
	margin: 0;
	padding: 0;
}

html {
	@include font-body;
	@include font-size-fluid( $font-sizes );
	line-height: $interval;
	color: $color-text;
	background-color: $color-bg;
	// -moz-osx-font-smoothing: grayscale;  // if animations
	// -webkit-font-smoothing: antialiased; // if animations
	scroll-behavior: smooth;
}

a,
button {
	@include box-span( transparent, inherit, true );
	text-decoration-skip: ink;
	text-decoration-skip-ink: auto;
	&:hover,
	&:focus,
	&:active {
		outline: 0; // careful to make it accessible
		text-decoration: none;
		color: $color-bg;
		background-color: $color-text;
		* {
			color: inherit;
		}
		svg {
			fill: currentcolor;
		}
	}
}

h1, h2, h3, h4, h5, h6 {
	font-size: inherit;
}

h4, h5, h6 {
	font-weight: inherit;
}

blockquote {
	@include box-block;
	& & {
		margin-left: $gap;
		padding: 0; // initial
		border-radius: 0; // initial
		background-color: transparent; // initial
	}
}

code {
	@include font-fixed;
}

:not(pre) > code {
	@include box-span( $color-code-bg );
	word-wrap: break-word; // = overflow-wrap; there is no other way to break lines within markdown-rendered `code` (cannot manually insert `<wbr>` or `&#8203;` (zero-width space))
}

pre {
	@include box-block( $color-code-bg );
	@include scrolling-hints( $color-code-bg );
	padding-top: ( $gap / 2 ); // override
	padding-bottom: ( $gap / 2 ); // override
	tab-size: 4;
	word-wrap: normal;
	word-break: normal;
}

// Custom list styles; someday use ::marker instead
// Watch out for ordered lists with attributes "start" and "reversed"
ol:not([start]):not([reversed]) {
// 	counter-reset: ol attr(start number, 0);
	counter-reset: ol; // create new instance of counter with each nested ol
	> li {
		display: block; // remove list-style
		counter-increment: ol; // increment only this instance of counter
		&::before {
			@include font-feature-settings( smcp, lnum, tnum ); // small-caps lining, tabular numbers (Source Sans Pro doesn't actually have small-cap tabular numbers
			content: counters(ol, ".") "."; // concatenate all counters // bug?
			float: left; // ugly when items more than single digit; consider absolute position, right: 100%
			margin-left: ( $gap * -1 );
			margin-right: ( $gap / 2 );
		}
	}
}

ul {
	> li {
		display: block; // remove list-style
		&::before {
			content: "▪︎"; // small black square for first-level unordered list items
			float: left;
			margin-left: -#{$gap}; // left align; -1.125em to match default
		}
		> ul > li::before {
			content: "▫︎"; // small hollow square for second-level items
		}
		> ul > li > ul li::before {
			content: "⁃"; // hyphen bullet for third-level and deepers items
		}
	}
}

ol, ul {
	header &,
	footer & {
		@include list-none;
	}
}

li,
dd {
	margin-left: $gap;
}

dt {
	@include font-smcp;
}

dd::before {
	content: "—";
	float: left;
	margin-left: (-$gap);
}

audio, img, svg, video, figure, table, iframe {
	max-width: 100%;
	margin-left: auto;
	margin-right: auto;
}

audio, img, svg, video {
	vertical-align: top;
}

img {
	height: auto;
}

svg {
	fill: currentcolor;
}

video {
	@include box( #000 );
}

figure {
	width: fit-content; // No IE/Edge
	img {
		border-radius: $border-radius;
	}
}

figcaption {
	@include font-small;
}

figcaption,
caption {
	font-style: italic;
	em,
	cite {
		font-style: normal; // invert
	}
}

caption {
	caption-side: bottom;
}

table {
// 	@include font-small( 1 );
	@include font-feature-settings( lnum, tnum ); // lining and tabular numbers
	line-height: 1;
	table-layout: fixed;
	border-collapse: collapse;
}

th, td {
	padding: ( ( $gap - 1rem ) / 2 ) 0; // split the padding
	text-align: left;
	vertical-align: baseline;
	& + & {
		padding-left: $gap; // okay if no borders
	}
}

th {
	@include font-smcp;
	@include sticky; // only supported in Chrome on th, not thead or tr
}

iframe {
	display: block;
	border: $border-width $border-style;
	border-radius: $border-radius;
	overflow: hidden;
}

mark {
	@include box-span( rgba( #ffee00, .85 ) ); // yellow
}

// https://alistapart.com/article/web-typography-numerals
sub {
	@include font-feature-settings( subs ); // subscript
	// @supports (font-variant-position: sub) or (font-feature-settings: "subs" 1) {
	//	vertical-align: baseline;
	//	font-size: inherit;
	// }
}

sup {
	@include font-feature-settings( sups ); // superscript
	// @supports (font-variant-position: super) or (font-feature-settings: "sups" 1) {
	//	vertical-align: baseline;
	//	font-size: inherit;
	// }
}

// Feature queries (@supports) makes Jekyll Sass compiler choke...
// When fixed, remove sub, sup rule below and uncomment @supports above
sub,
sup {
	vertical-align: baseline;
	font-size: inherit;
}

address {
	white-space: pre-wrap;
}

small {
	@include font-small;
}

abbr {
	@include font-smcp;
	font-weight: inherit; // override; this may result in faux bold
	&[title] {
		-webkit-text-decoration: underline dotted; // Not picked up by prefixfree.js
		text-decoration: underline dotted; // added here just to be consistent with above
		a & {
			-webkit-text-decoration: none; // Not picked up by prefixfree.js
			text-decoration: none;
		}
	}
}

hr {
	position: relative;
	min-height: $gap;
	border: 0;
	&::after {
		position: absolute;
		top: 0;
		width: 100%;
// 		text-align: center;
		content: "▪︎\A0\A0\A0\A0▪︎\A0\A0\A0\A0▪︎";
	}
}

button,
input {
	@include font-feature-settings( lnum ); // lining numbers
	line-height: inherit;
	min-height: 1.5em;
	border-radius: $border-radius;
	border: 0;
}

button {
	margin: 0; // override box-span
	cursor: pointer;
	> * { // such as svg
		pointer-events: none;
	}
}

input {
	padding: 0 .25em;
	caret-color: $color-focus; // a nice touch
}

[type="search"] {
	background-image: -webkit-linear-gradient(transparent, transparent); // Allow search input to be styled in iOS Safari
}

[type="search"]::-webkit-search-cancel-button {
	-webkit-appearance: none;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
	outline: 1px dotted $color-focus;
}

:target,
input:focus {
	animation: target 2.5s ease forwards;
	outline: 4px solid $color-focus;
	outline-offset: 4px;
}

@keyframes target {
	0% {
		outline-color: transparent;
	}
	25% {
		outline-color: $color-focus;
	}
	60% {
		outline-color: $color-focus;
	}
	100% {
		outline-color: transparent;
	}
}
