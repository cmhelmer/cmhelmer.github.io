// Base styles for unclassed elements
// Default paragraph and character elements output by Markdown renderer (kramdown)
// Can extend top-level selectors to merge with reset

// Default block-level elements

* {
	margin: 0;
	padding: 0;
}

// Block-level elements
// Add vertical margin
// With a few exceptions: dd, li (kramdown can add containing <p> to these)
// And additions: audio, iframe, pre code
address, article, aside, audio, blockquote, canvas, div, dl, dt, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, header, hgroup, hr, iframe, nav, noscript, ol, output, p, pre, pre code, section, table, tfoot, ul, video {
	margin: $gap 0;
}

dt {
	margin-bottom: 0;
}

img + figcaption,
dt + dt {
	margin-top: 0;
}

audio, iframe, video {
	display: block;
	width: 100%;
}

pre code {
	display: inline-block;
}

:root {
	@include font-body;
	@include font-size-fluid( $font-sizes );
	line-height: $interval;
	color: $color-text;
	background-color: $color-bg;
	// -moz-osx-font-smoothing: grayscale;  // if animations
	// -webkit-font-smoothing: antialiased; // if animations
	scroll-behavior: smooth;

	// Have fun with custom properties (CSS variables)
	// Use a responsive variable to adjust white-space between min and max "locks"
	// Fallback to $gap set throughout
	--gutter: #{map-get( $gutter-sizes, "min" )};

	@media screen and (min-width: $width-min) {
		--gutter: #{map-get( $gutter-sizes, "responsive" )};
	}

	@media screen and (min-width: $width-max) {
		--gutter: #{map-get( $gutter-sizes, "max" )};
	}
}

a {
	@include box-span( transparent, inherit, true );
	text-decoration-skip: ink;
	text-decoration-skip-ink: auto;
	hanging-punctuation: none; // default; if underline
	&:hover,
	&:focus,
	&:active,
	&:focus-within {
		outline: 0; // check accessibility
		text-decoration: none;
		color: $color-bg;
		background-color: $color-text;
		* {
			color: inherit;
			fill: currentcolor; // svg
		}
	}
	header & {
		text-decoration: none;
	}
}

h1, h2, h3, h4, h5, h6 {
	font-size: inherit;
	hyphens: manual;
}

h3, h4, h5, h6 {
	font-weight: normal;
}

blockquote {
	@include box-block;
}

code {
	@include font-fixed;
}

:not(pre) > code {
	@include box-span( $color-code-bg );
	word-wrap: break-word; // = overflow-wrap; there is no other way to break lines within markdown-rendered `code` (cannot manually insert `<wbr>` or `&#8203;` (zero-width space))
}

pre {
	@include box-block( $color-code-bg );
	@include scrolling-hints( $color-code-bg );
	tab-size: 4;
	word-wrap: normal;
	word-break: normal;
}

// Custom list styles; someday use ::marker instead

// Watch out for ordered lists with attributes "start" and "reversed"
ol:not([start]):not([reversed]) {
// 	counter-reset: ol attr(start number, 0);
	counter-reset: ol; // create new instance of counter with each nested ol
	> li {
		display: block; // remove list-style
		counter-increment: ol; // increment only this instance of counter
		&::before {
			@include font-feature-settings( smcp, lnum, tnum ); // small-caps lining, tabular numbers (Source Sans Pro doesn't actually have small-cap tabular numbers
			content: counters(ol, ".") "."; // concatenate all counters // bug?
			float: left; // ugly when items more than single digit; consider absolute position, right: 100%
			min-width: 1.25rem;
			margin-left: ( $gap * -1 );
			margin-right: ( $gap - 1.25rem ); // $gap - min-width
		}
	}
}

ul {
	> li {
		display: block; // remove list-style
		&::before {
			content: "▪︎"; // small black square for first-level unordered list items
			float: left;
			margin-left: -#{$gap}; // left align; -1.125em to match default
		}
		> ul > li::before {
			content: "▫︎"; // small hollow square for second-level items
		}
		> ul > li > ul li::before {
			content: "⁃"; // hyphen bullet for third-level and deepers items
		}
	}
}

ol, ul, dl {
	padding-left: $gap;
	padding-right: $gap; // contained within narrow viewports, hangs off into margin at wide
}

ol, ul {
	header &,
	footer & {
		margin: 0;
		@include list-none;
	}
}

dt {
	@include font-smcp;
}

dd::before {
	content: "—";
	float: left;
	margin-left: (-$gap);
}

audio, img, svg, video, figure, table {
	max-width: 100%;
}

audio, img, svg, video {
	vertical-align: top;
}

img {
	height: auto;
}

svg {
	fill: currentcolor;
}

video {
	@include box( #000 );
}

figure {
	width: fit-content; // No IE/Edge
	img {
		border-radius: $border-radius;
	}
}

figcaption {
	@include font-small;
}

figcaption,
caption {
	font-style: italic;
	em,
	cite {
		font-style: normal; // invert (should bold?)
	}
}

caption {
	caption-side: bottom;
}

table {
// 	@include font-small( 1 );
	@include font-feature-settings( lnum, tnum ); // lining and tabular numbers
	line-height: 1;
	table-layout: fixed;
	border-collapse: collapse;
}

th, td {
	padding: ( ( $gap - 1rem ) / 2 ) 0; // split the padding
	text-align: left;
	vertical-align: baseline;
	& + & {
		padding-left: $gap; // okay if no borders
	}
}

th {
	@include font-smcp;
	@include sticky; // only supported in Chrome on th, not thead or tr
}

iframe {
	border: $border-width $border-style;
	border-radius: $border-radius;
	overflow: hidden;
}

mark {
	@include box-span( rgba( #ffee00, .85 ) ); // yellow
}

// https://alistapart.com/article/web-typography-numerals
sub {
	@include font-feature-settings( subs ); // subscript
	// @supports (font-variant-position: sub) or (font-feature-settings: "subs" 1) {
	//	vertical-align: baseline;
	//	font-size: inherit;
	// }
}

sup {
	@include font-feature-settings( sups ); // superscript
	// @supports (font-variant-position: super) or (font-feature-settings: "sups" 1) {
	//	vertical-align: baseline;
	//	font-size: inherit;
	// }
}

// Feature queries (@supports) makes Jekyll Sass compiler choke...
// When fixed, remove sub, sup rule below (vertical-align and font-size) and uncomment @supports above
sub,
sup {
	vertical-align: baseline;
	font-size: inherit;
	a {
		padding: 0 .45em; // a little breathing room for links and between multiple footnotes
	}
}

address {
	white-space: pre-wrap;
}

small {
	@include font-small;
	@include dim;
}

abbr {
	@include font-smcp;
	font-weight: inherit; // override; this may result in faux bold
	&[title] {
		-webkit-text-decoration: underline dotted; // Not picked up by prefixfree.js
		text-decoration: underline dotted; // added here just to be consistent with above
		a & {
			-webkit-text-decoration: none; // Not picked up by prefixfree.js
			text-decoration: none;
		}
	}
}

hr {
	@include measure;
	@include rule;
	position: relative;
	height: 1px; // don't collapse
	margin-top: ( $gap * 1.5 ); // subtract height?
	margin-bottom: ( $gap * 1.5 );
	border: 0;
}

button,
input {
	@include font-feature-settings( lnum ); // lining numbers
	color: inherit;
	line-height: inherit;
	height: $gap;
	border-radius: $border-radius;
	border: 0;
}

button {
	margin: 0; // override box-span
	cursor: pointer;
	> * { // such as svg
		pointer-events: none;
	}
}

input {
	padding: 0 .25em;
	caret-color: $color-focus; // nice touch
}

input[type="checkbox"] {
	position: relative; // for pseudo-content
// 	visibility: hidden; // step aside
	width: ( $gap / 2 );
	height: ( $gap / 2 );
	margin-right: ( $gap / 2 );
	border: $border-width solid;
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
	
	// Increase hit area of checkbox
	&::before {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		margin: ( $gap / -4 );
	}

	// Custom checkbox content
	&::after {
		content: "";
		visibility: visible;
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		font-size: ( $font-size-small * 1rem );
		font-weight: 600; // faux bold
		line-height: .7; // tweak
		text-align: center;
		background: $color-code-bg;
	}

	&:checked::after {
		content: "\2713"; // checkmark ✓
	}
	
	&:disabled {
// 		@include dim;
		color: $color-text;
		border-color: $color-code-bg;
	}
}

[type="search"] {
	background-image: -webkit-linear-gradient(transparent, transparent); // Allow search input to be styled in iOS Safari
}

[type="search"]::-webkit-search-cancel-button {
	-webkit-appearance: none;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
	outline: 1px dotted $color-focus;
}

:target,
:focus {
	animation: target 2.5s ease forwards;
	outline: ($border-width * 2) solid $color-focus;
	outline-offset: ( $gap / 2 );
}

@keyframes target {
	0% {
		outline-color: transparent;
	}
	25% {
		outline-color: $color-focus;
	}
	60% {
		outline-color: $color-focus;
	}
	100% {
		outline-color: transparent;
	}
}
